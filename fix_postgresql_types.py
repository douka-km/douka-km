#!/usr/bin/env python3
"""
Script pour corriger les types PostgreSQL et tester les requ√™tes
"""

import os
import sys
from sqlalchemy import create_engine, text
from models import *

def test_postgresql_queries():
    """Tester les requ√™tes PostgreSQL apr√®s correction"""
    
    # Utiliser la variable d'environnement DATABASE_URL si disponible
    database_url = os.getenv('DATABASE_URL')
    if not database_url:
        print("‚ùå DATABASE_URL non d√©fini")
        return False
    
    try:
        # Cr√©er l'engine PostgreSQL
        engine = create_engine(database_url)
        
        print("üîç Test des requ√™tes PostgreSQL...")
        
        # Test 1: V√©rifier les types de colonnes
        with engine.connect() as conn:
            result = conn.execute(text("""
                SELECT column_name, data_type 
                FROM information_schema.columns 
                WHERE table_name = 'orders' AND column_name = 'id'
            """))
            
            for row in result:
                print(f"‚úÖ Colonne orders.id: {row.column_name} ({row.data_type})")
        
        # Test 2: Tester une requ√™te avec conversion de type
        with engine.connect() as conn:
            # Cette requ√™te devrait maintenant fonctionner
            result = conn.execute(text("""
                SELECT id, customer_email, status 
                FROM orders 
                WHERE id = :order_id AND merchant_id IS NULL 
                LIMIT 1
            """), {"order_id": 1})
            
            row = result.fetchone()
            if row:
                print(f"‚úÖ Test requ√™te r√©ussie: Commande {row.id} ({row.customer_email})")
            else:
                print("‚ÑπÔ∏è Aucune commande admin trouv√©e (normal si base vide)")
        
        print("‚úÖ Tests PostgreSQL r√©ussis!")
        return True
        
    except Exception as e:
        print(f"‚ùå Erreur lors du test PostgreSQL: {e}")
        return False

def main():
    """Fonction principale"""
    print("=== Correction des types PostgreSQL ===")
    
    if test_postgresql_queries():
        print("\n‚úÖ Toutes les corrections sont appliqu√©es avec succ√®s!")
    else:
        print("\n‚ùå Des probl√®mes persistent")
        sys.exit(1)

if __name__ == "__main__":
    main()
