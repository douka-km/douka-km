#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Script de test pour cr√©er quelques commandes livr√©es pour tester l'historique
"""

from app_final_with_db import app, db
from models import Order, Employee
from datetime import datetime, timedelta

def create_test_delivered_orders():
    """Cr√©er quelques commandes livr√©es pour tester l'historique"""
    with app.app_context():
        try:
            # Trouver un employ√© livreur
            livreur = Employee.query.filter_by(role='livreur').first()
            if not livreur:
                print("‚ùå Aucun employ√© livreur trouv√©")
                return
            
            print(f"üì¶ Test avec le livreur: {livreur.first_name} {livreur.last_name} ({livreur.email})")
            
            # Cr√©er 3 commandes test livr√©es
            for i in range(3):
                # Trouver une commande existante sans livreur assign√©
                order = Order.query.filter(
                    Order.delivery_employee_email.is_(None),
                    Order.status != 'delivered'
                ).first()
                
                if order:
                    # Assigner le livreur
                    order.delivery_employee_id = livreur.id
                    order.delivery_employee_email = livreur.email
                    order.delivery_employee_name = f"{livreur.first_name} {livreur.last_name}"
                    order.delivery_employee_phone = livreur.phone
                    order.assigned_at = datetime.now() - timedelta(days=i+1)
                    
                    # Marquer comme livr√©e
                    order.status = 'delivered'
                    order.delivery_date = datetime.now() - timedelta(hours=i*2)
                    
                    print(f"‚úÖ Commande #{order.id} assign√©e et marqu√©e comme livr√©e")
                else:
                    print(f"‚ö†Ô∏è  Pas de commande disponible pour test #{i+1}")
            
            db.session.commit()
            print("üéâ Commandes test cr√©√©es avec succ√®s!")
            
            # Afficher le r√©sum√©
            delivered_count = Order.query.filter_by(
                delivery_employee_email=livreur.email,
                status='delivered'
            ).count()
            print(f"üìä Total commandes livr√©es par {livreur.first_name}: {delivered_count}")
            
        except Exception as e:
            print(f"‚ùå Erreur: {e}")
            db.session.rollback()

if __name__ == "__main__":
    create_test_delivered_orders()
