#!/usr/bin/env python3
"""
Script pour corriger les probl√®mes de sch√©ma de base de donn√©es sur Render.com
"""
import os
import sys

def fix_render_database():
    """Fonction principale pour corriger la base de donn√©es"""
    try:
        # S'assurer qu'on est en mode production
        os.environ['RENDER'] = '1'
        
        # Importer les modules n√©cessaires
        from app_final_with_db import app
        from models import db
        from sqlalchemy import text
        
        print("üîß Correction de la base de donn√©es PostgreSQL...")
        
        with app.app_context():
            # Cr√©er toutes les tables manquantes d'abord
            db.create_all()
            print("‚úÖ Tables cr√©√©es ou v√©rifi√©es")
            
            # D√©tecter le type de base de donn√©es
            db_type = str(db.engine.url).split(':')[0].lower()
            print(f"üîç Type de base de donn√©es d√©tect√©: {db_type}")
            
            if db_type.startswith('postgresql'):
                # PostgreSQL - utiliser information_schema
                check_category_query = text("""
                    SELECT column_name 
                    FROM information_schema.columns 
                    WHERE table_name = 'categories' AND column_name = 'updated_at'
                """)
                
                check_subcategory_query = text("""
                    SELECT column_name 
                    FROM information_schema.columns 
                    WHERE table_name = 'subcategories' AND column_name = 'updated_at'
                """)
                
                # V√©rifier et ajouter updated_at √† categories
                result = db.session.execute(check_category_query).fetchall()
                if not result:
                    print("‚ûï Ajout de updated_at √† categories...")
                    add_category_column = text("""
                        ALTER TABLE categories 
                        ADD COLUMN updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
                    """)
                    db.session.execute(add_category_column)
                    db.session.commit()
                    print("‚úÖ Colonne updated_at ajout√©e √† categories")
                else:
                    print("‚úÖ Colonne updated_at existe d√©j√† dans categories")
                
                # V√©rifier et ajouter updated_at √† subcategories
                result = db.session.execute(check_subcategory_query).fetchall()
                if not result:
                    print("‚ûï Ajout de updated_at √† subcategories...")
                    add_subcategory_column = text("""
                        ALTER TABLE subcategories 
                        ADD COLUMN updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
                    """)
                    db.session.execute(add_subcategory_column)
                    db.session.commit()
                    print("‚úÖ Colonne updated_at ajout√©e √† subcategories")
                else:
                    print("‚úÖ Colonne updated_at existe d√©j√† dans subcategories")
                    
            elif db_type.startswith('sqlite'):
                # SQLite - utiliser PRAGMA
                check_category_query = text("PRAGMA table_info(categories)")
                result = db.session.execute(check_category_query).fetchall()
                
                # V√©rifier si updated_at existe d√©j√†
                category_has_updated_at = any('updated_at' in str(row) for row in result)
                
                if not category_has_updated_at:
                    print("‚ûï Ajout de updated_at √† categories (SQLite)...")
                    add_category_column = text("""
                        ALTER TABLE categories 
                        ADD COLUMN updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
                    """)
                    db.session.execute(add_category_column)
                    db.session.commit()
                    print("‚úÖ Colonne updated_at ajout√©e √† categories")
                else:
                    print("‚úÖ Colonne updated_at existe d√©j√† dans categories")
                
                # M√™me chose pour subcategories
                check_subcategory_query = text("PRAGMA table_info(subcategories)")
                result = db.session.execute(check_subcategory_query).fetchall()
                
                subcategory_has_updated_at = any('updated_at' in str(row) for row in result)
                
                if not subcategory_has_updated_at:
                    print("‚ûï Ajout de updated_at √† subcategories (SQLite)...")
                    add_subcategory_column = text("""
                        ALTER TABLE subcategories 
                        ADD COLUMN updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
                    """)
                    db.session.execute(add_subcategory_column)
                    db.session.commit()
                    print("‚úÖ Colonne updated_at ajout√©e √† subcategories")
                else:
                    print("‚úÖ Colonne updated_at existe d√©j√† dans subcategories")
            
            else:
                print(f"‚ö†Ô∏è Type de base de donn√©es non support√©: {db_type}")
                return False
            
        print("‚úÖ Correction de la base de donn√©es termin√©e avec succ√®s!")
        return True
        
    except Exception as e:
        print(f"‚ùå Erreur lors de la correction: {e}")
        import traceback
        print(f"üìç Traceback: {traceback.format_exc()}")
        return False

def create_sample_categories():
    """Cr√©er des cat√©gories d'exemple si aucune n'existe"""
    try:
        from app_final_with_db import app
        from models import db, Category, Subcategory
        from datetime import datetime
        
        with app.app_context():
            # V√©rifier s'il y a d√©j√† des cat√©gories
            existing_categories = Category.query.count()
            if existing_categories > 0:
                print(f"‚úÖ {existing_categories} cat√©gories existent d√©j√†")
                return True
            
            # Cr√©er quelques cat√©gories d'exemple
            categories_data = [
                {
                    'name': '√âlectronique',
                    'description': 'T√©l√©phones, ordinateurs, accessoires',
                    'icon': 'fas fa-laptop'
                },
                {
                    'name': 'V√™tements',
                    'description': 'Mode homme, femme, enfant',
                    'icon': 'fas fa-tshirt'
                },
                {
                    'name': 'Alimentaire',
                    'description': 'Produits frais et √©picerie',
                    'icon': 'fas fa-apple-alt'
                }
            ]
            
            print("üè∑Ô∏è Cr√©ation de cat√©gories d'exemple...")
            for cat_data in categories_data:
                category = Category(
                    name=cat_data['name'],
                    description=cat_data['description'],
                    icon=cat_data['icon'],
                    active=True,
                    created_at=datetime.now(),
                    updated_at=datetime.now(),
                    created_by='system'
                )
                db.session.add(category)
            
            db.session.commit()
            print(f"‚úÖ {len(categories_data)} cat√©gories d'exemple cr√©√©es")
            return True
            
    except Exception as e:
        print(f"‚ùå Erreur lors de la cr√©ation des cat√©gories: {e}")
        return False

if __name__ == "__main__":
    print("üöÄ D√©marrage de la correction de base de donn√©es...")
    
    success = fix_render_database()
    if success:
        create_sample_categories()
        print("‚úÖ Correction termin√©e avec succ√®s!")
    else:
        print("‚ùå Correction √©chou√©e")
        sys.exit(1)

def fix_render_database():
    """Corrige la base de donn√©es sur Render en ajoutant les colonnes manquantes"""
    print("üîß Correction de la base de donn√©es...")
    
    try:
        from app_final_with_db import app, db
        from models import Category, Subcategory
        from sqlalchemy import text, inspect
        
        with app.app_context():
            # D√©tecter le type de base de donn√©es
            engine = db.engine
            db_dialect = engine.dialect.name
            print(f"üìä Type de base de donn√©es d√©tect√©: {db_dialect}")
            
            # Utiliser l'inspecteur SQLAlchemy pour une approche plus g√©n√©rique
            inspector = inspect(engine)
            
            # V√©rifier les tables existantes
            tables = inspector.get_table_names()
            print(f"Tables existantes: {tables}")
            
            # Fonction pour v√©rifier et ajouter une colonne
            def add_column_if_missing(table_name, column_name, column_type="TIMESTAMP"):
                try:
                    columns = inspector.get_columns(table_name)
                    column_names = [col['name'] for col in columns]
                    print(f"Colonnes de '{table_name}': {column_names}")
                    
                    if column_name not in column_names:
                        print(f"‚ûï Ajout de la colonne '{column_name}' √† la table '{table_name}'...")
                        
                        # Adapter la syntaxe selon le type de DB
                        if db_dialect == 'postgresql':
                            sql = f"ALTER TABLE {table_name} ADD COLUMN {column_name} TIMESTAMP DEFAULT CURRENT_TIMESTAMP"
                        elif db_dialect == 'sqlite':
                            sql = f"ALTER TABLE {table_name} ADD COLUMN {column_name} DATETIME DEFAULT CURRENT_TIMESTAMP"
                        else:
                            sql = f"ALTER TABLE {table_name} ADD COLUMN {column_name} {column_type}"
                        
                        db.session.execute(text(sql))
                        print(f"‚úÖ Colonne '{column_name}' ajout√©e √† '{table_name}'")
                        return True
                    else:
                        print(f"‚úÖ Colonne '{column_name}' d√©j√† pr√©sente dans '{table_name}'")
                        return False
                        
                except Exception as e:
                    print(f"‚ö†Ô∏è Erreur avec la table {table_name}: {e}")
                    return False
            
            # Ajouter les colonnes manquantes
            changes_made = False
            
            if 'categories' in tables:
                if add_column_if_missing('categories', 'updated_at'):
                    changes_made = True
            else:
                print("‚ö†Ô∏è Table 'categories' non trouv√©e")
            
            if 'subcategories' in tables:
                if add_column_if_missing('subcategories', 'updated_at'):
                    changes_made = True
            else:
                print("‚ö†Ô∏è Table 'subcategories' non trouv√©e")
            
            # Commiter les changements seulement si n√©cessaire
            if changes_made:
                db.session.commit()
                print("üíæ Changements sauvegard√©s")
            else:
                print("‚úÖ Aucune modification n√©cessaire")
            
            # Tester l'acc√®s aux cat√©gories
            print("üß™ Test d'acc√®s aux cat√©gories...")
            categories = Category.query.all()
            print(f"‚úÖ {len(categories)} cat√©gories trouv√©es")
            
            subcategories = Subcategory.query.all()
            print(f"‚úÖ {len(subcategories)} sous-cat√©gories trouv√©es")
            
            print("üéâ Base de donn√©es corrig√©e avec succ√®s!")
            return True
            
    except Exception as e:
        print(f"‚ùå Erreur lors de la correction: {e}")
        import traceback
        print(f"Traceback: {traceback.format_exc()}")
        return False

def create_sample_categories():
    """Cr√©e quelques cat√©gories d'exemple si aucune n'existe"""
    try:
        from app_final_with_db import app, db
        from models import Category, Subcategory
        
        with app.app_context():
            # V√©rifier si des cat√©gories existent d√©j√†
            if Category.query.count() == 0:
                print("üìù Cr√©ation de cat√©gories d'exemple...")
                
                # Cat√©gories d'exemple pour les Comores
                sample_categories = [
                    {"name": "Alimentation", "description": "Produits alimentaires locaux et import√©s", "icon": "fas fa-apple-alt"},
                    {"name": "V√™tements", "description": "Mode et accessoires", "icon": "fas fa-tshirt"},
                    {"name": "√âlectronique", "description": "Appareils √©lectroniques et gadgets", "icon": "fas fa-mobile-alt"},
                    {"name": "Maison & Jardin", "description": "Articles pour la maison et le jardin", "icon": "fas fa-home"},
                    {"name": "Sant√© & Beaut√©", "description": "Produits de sant√© et cosm√©tiques", "icon": "fas fa-heart"}
                ]
                
                created_count = 0
                for cat_data in sample_categories:
                    try:
                        category = Category(
                            name=cat_data["name"],
                            description=cat_data["description"],
                            icon=cat_data["icon"],
                            active=True,
                            created_by="system@doukakm.com"
                        )
                        db.session.add(category)
                        created_count += 1
                    except Exception as e:
                        print(f"‚ö†Ô∏è Erreur cr√©ation cat√©gorie {cat_data['name']}: {e}")
                
                db.session.commit()
                print(f"‚úÖ {created_count} cat√©gories d'exemple cr√©√©es")
            else:
                print(f"‚úÖ {Category.query.count()} cat√©gories d√©j√† pr√©sentes")
                
    except Exception as e:
        print(f"‚ùå Erreur lors de la cr√©ation des cat√©gories d'exemple: {e}")

def fix_render_database_from_init():
    """Version de fix_render_database() qui peut √™tre appel√©e depuis init_render.py"""
    print("üîß Correction de la base de donn√©es depuis init_render...")
    
    success = fix_render_database()
    if success:
        create_sample_categories()
        print("‚úÖ Base de donn√©es corrig√©e depuis init_render")
    else:
        print("‚ùå √âchec de la correction depuis init_render")
    
    return success

if __name__ == "__main__":
    print("üöÄ D√©marrage de la correction de la base de donn√©es Render...")
    
    if fix_render_database():
        create_sample_categories()
        
        # Recharger les cat√©gories si possible
        try:
            from app_final_with_db import reload_categories_and_subcategories
            reload_categories_and_subcategories()
        except ImportError:
            print("üí° Function reload_categories_and_subcategories non disponible")
        
        print("üéâ Correction termin√©e avec succ√®s!")
        sys.exit(0)
    else:
        print("‚ùå √âchec de la correction")
        sys.exit(1)
